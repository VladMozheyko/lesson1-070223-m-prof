import animals.Animal;
import animals.Snake;
import animals.Tiger;
import cats.Cat;
import cats.Lion;
import institute.TelRan;

public class Main {

    /*
    План занятия
    1) Классы
    2) Приемы работы с классами
    3) Наследование
     */

     /*
    Теория
    Класс - шаблон, который позволяет создавать в коде сущности реального мира. На основании класс можно создавать конкретные
    экземпляры - объекты. Классы нгаходятся в специальной области памяти JVM(Java Virtual Machine), которая называется
    metaspace и классы могут содержать в себе переменные и методы, т.е. не создавать конкретный их экземпляр в объекте для
    этого элемент класса нужно пометить модификатором static, если элемент в своей сигнатуре не имеет этого модификатора,
    то при создании объекта будет создавать персональный экземпляр этого элемента. К статическим элементам можно получить
    доступ через имя класса

    Классы бывают абстрактными, т.е. имеющими абстрактные методы

    Объект - экземпляр класса, т.е. конкретный представитель данного типа, например:
    Есть класс Cat - шаблон для котов, объектом этого класса будет конкретный кот
    public class Cat{
     int age;
     String name;

     public Cat(int age, String name){     - Данный метод называется конструктором. Названия конструкторов всегда совпадают с
     this.age = age;                        названиями класса. Эти методы вызываются при создании объекта и позволяют инициализировать
     this.name = name;                      его состояние - присвоить значения переменным и т.д. Конструторм может быть сколько угодно(полиморфизм)
     }
    }

    Cat myrka = new Cat(5, "Myrka");     - Объекта класса Cat.

     Наследование - возможность передачи функционала от класса другим классам для того чтобы унаследовать класс нужно в сигнатуре
     класса указать ключевое словао extends  и выбрать имя наследуемого класса, например:

     public class Lion extends Cat -  класс Lion наследует класс Cat

     Методы которые имеют одинаковые названия называются перегружеными(overload)
     Если в потомке необходимо изменить поведение метода, его можно переопределить(override). Для этого нужно указать
     имя метода и в теле описать новый функционал, таким образом для класса потомка будет вызывать новый метод.
     Переопределенные методы принято помечать аннотацией - @Override(см. метод makeSound в классах Cat и Lion)

     Программирование по контракту:
     Рассмотрим классы Cat и Lion. Мы переопределили метод makeSound для Lion, но мы не были обязаны этого делать, таким образом
     если захотеть создать класс Tiger и не переопределять его метод makeSound, программа отработает и тигр начнет мяукать,
     унаследовав это свойство от кота, чтобы избегать таким ситуаций используются абстрактные классы, т.е. создается некий
     контракт на реализацию наследования.
     Привидем пример:
     Создадим класс Animal, в котором будет обязательным переопределение метода makeSound:

     public abstract class Animal{

     public abstract void makeSound();  abstract означает, что этот метод должны переопределить его потомки - создается контракт

     }

     Объекты абстрактных классов создавать нельзя, т.к. у них нет всех указных методов, т.е. некоторые методы нереализованы, но
     можно прямо при создании объекта реализовать абстрактные методы, т.е. выполнить контракт - такое исполнение называется
     - создание анонимного класса. Мы создаем для нашего объекта класс прямо в точке создания объекта.

     */

     /*
    Заметки
    Существуют интерфейсы - абсолютно абстрактные классы, т.е. в них в отличие от абстактных классов нет конкретных методов
    с реализацией
    Не стоит путать Абстракцию с абстрактными методами. Абстракция - это принцип ООП, который подразумевает создание в коде
    экземпляра какой-либо сущности, т.е. создание класса Cat - это прием абстракции, прр помощи которого мы запрограммировали кота,
    но указали только те его свойства, которые нам были нужны для выполнения поставленной задачи.
    Композиция - передача функционала не через наследование, а через создание объекта. Если нет прямой необходимости
    передать функционал через наследование, используйте композицию.

    Класс родитель называется суперклассом отсюда и ключевое слово super для ссылки на него

     */

     /*
    Задачи со звездочкой
   1) Создать абстрактный класс(контракт) для обработки структур данных: список,массив и хеш-таблица.
   2) Реализовать каждый класс(методы должны быть прописаны самостоятельно без коллекций)


     */

    public static void main(String[] args) {
       Cat myrka = new Cat(5, "Myrka", 'f', "Common", "cat");
       Lion symba = new Lion(220, "Symba", 'm', "Common", "lion", "mufumy");
        System.out.println("Переопределение метода makeSound для класса Lion: ");
       myrka.makeSound();
       symba.makeSound();
        System.out.println("Расширенный функционал класса Cat: ");
       symba.hunt();      // Расширили функционал класса Cat - в объекта класса Lion можно вызвать метод hunt, а в объекте класса Cat такого метода нет

        // Общие методы классов: Cat и Lion
         System.out.println("Общие методы классов: ");
        myrka.jump();
        symba.jump();

        myrka.eat();
        symba.eat();

        Tiger tiger = new Tiger("Симон");
        tiger.makeSound();

        Snake snake = new Snake("Гаргулья");
        snake.makeSound();

        tiger.walk();
        snake.walk();

        // Создание анонимного класса:
        Animal animal = new Animal() {
            @Override                       // Выполняем поставленный классом Animal контракт
            public void makeSound() {
              System.out.println("Создан абстрактный класс для объекта Animal");
            }
        } ;

        animal.makeSound();

        /*
        Задача
        Создать систему для учета студентов, преподавателей и работников института.
        Каждый студент будет иметь свойства:
        Возраст, имя, статус, направление
        Действия: Выполнять свою работу, писать
        Каждый преподаватель будет иметь свойства:
        Возраст, имя, статус, квалификацию
        Действия
        Действия: Выполнять свою работу, писать

       Каждый работник будет иметь свойства:
       Возраст, имя, статус, должность
        Действия: Выполнять свою работу, писать, ходить в офис.

        Каждый член организации должен иметь уникальный автогенерируемый id

        Решение
        Создать отдельный package для задачи
        Создать абстрактный клаcc human и вынести в него общие свойства
        Создать классы для каждого члена организации.
        Создать класс TelRan, который будет управлять учебным процессом.

         */

        TelRan telRan = new TelRan();
        telRan.init();
        telRan.performLection();

//        TelRan telRan1 = new TelRan();              Задание по практике. Подумать   как при помощи Singleton реализовать
//        telRan1.performLection();                   корректную работу данного части кода

    }

    /*
    Дз
    1) Создать абстрактный класс(контракт) для автосалона. Придумать общие свойства для автомобилей
    2) Реализовать несколько конкретных классов автомобилей
    3) Создать работников автосалона: менеджер, продавец, охранник и т.д.
    4) Сделать класс для управления автосалоном
     */
}
